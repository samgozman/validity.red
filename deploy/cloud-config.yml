#cloud-config
package_update: true
package_upgrade: true
packages:
  - curl
  - snapd
  - python3-pip
  # Basic nginx dependencies 
  - build-essential
  - libpcre3
  - libpcre3-dev
  - zlib1g
  - zlib1g-dev
  - libssl-dev
  - libgd-dev
  - libxml2
  - libxml2-dev
  - uuid-dev
  # Additional packages that may be needed for nginx modules
  - libossp-uuid-dev
  - libgeoip-dev
  - libxslt-dev
write_files:
  - content: |
      #!/bin/bash
      /usr/bin/certbot renew --quiet && systemctl reload nginx
    path: /etc/cron.daily/certbot
    permissions: '0755'
  - content: |
      #!/bin/bash
      . /validity/backup.sh >> /validity/backup.log 2>&1
    path: /etc/cron.daily/validity-backup
    permissions: '0755'
  - content: |
      25 4    * * *   root    cd / && run-parts --report /etc/cron.daily
    path: /etc/crontab
    append: true
runcmd:
  - ufw disable # disable firewall. Using VPS firewall instead
  # Install b2 cli
  - pip install b2 # install BackBlaze cli
  - curl -fsSL https://get.docker.com | sh # install docker
  - wget https://nginx.org/download/nginx-1.23.2.tar.gz  # download nginx
  - tar -zxvf nginx-1.23.2.tar.gz # extract nginx
  - cd nginx-1.23.2 # change directory to nginx
  - | # configure nginx
    ./configure \
      --sbin-path=/usr/bin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --lock-path=/var/lock/nginx.lock \
      --pid-path=/var/run/nginx.pid \
      --with-pcre \
      --with-http_ssl_module \
      --with-http_v2_module 
  - make install
  - | # Add nginx to systemd
    cat >> /lib/systemd/system/nginx.service <<EOL
    [Unit]
    Description=The NGINX HTTP and reverse proxy server
    After=syslog.target network-online.target remote-fs.target nss-lookup.target
    Wants=network-online.target
    [Service]
    Type=forking
    PIDFile=/var/run/nginx.pid
    ExecStartPre=/usr/bin/nginx -t
    ExecStart=/usr/bin/nginx
    ExecReload=/usr/bin/nginx -s reload
    ExecStop=/bin/kill -s QUIT $MAINPID
    PrivateTmp=true
    [Install]
    WantedBy=multi-user.target
    EOL
  - cd .. # get out of nginx directory
  # download temporary nginx config
  - curl -o nginx.conf https://raw.githubusercontent.com/samgozman/validity.red/main/deploy/temp/nginx.conf
  - cp -rf nginx.conf /etc/nginx/nginx.conf
  - systemctl start nginx # start nginx
  - systemctl enable nginx # enable nginx on boot
  # Copy docker-compose.yml and scripts
  - mkdir /validity
  - cd /validity # Create project folder and copy compose & updater files
  - curl -o docker-compose.yml https://raw.githubusercontent.com/samgozman/validity.red/main/deploy/docker-compose.yml
  - curl -o updater.sh https://raw.githubusercontent.com/samgozman/validity.red/main/deploy/updater.sh
  - curl -o backup.sh https://raw.githubusercontent.com/samgozman/validity.red/main/deploy/backup.sh
  - chmod +x backup.sh updater.sh
  # Create folder for static files
  - mkdir /srv/validity
  - mkdir /srv/validity/files
  # Install certbot
  - snap install core; snap refresh core
  - snap install --classic certbot
  - ln -s /snap/bin/certbot /usr/bin/certbot
  # Create SSL certificate
  - |
    certbot certonly --noninteractive --agree-tos \
      --cert-name validity \
      -d validity.extr.app \
      -m sam@gozman.space \
      --webroot -w /srv/validity/files
  - cd /
  # Download the final nginx config
  - curl -o nginx.conf https://raw.githubusercontent.com/samgozman/validity.red/main/deploy/nginx.conf
  - cp -rf nginx.conf /etc/nginx/nginx.conf
  - systemctl reload nginx # restart nginx
  # ! Finish
  - reboot
