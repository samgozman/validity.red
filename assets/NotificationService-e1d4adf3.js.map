{"version":3,"file":"NotificationService-e1d4adf3.js","sources":["../../src/components/document/NotificationService.ts"],"sourcesContent":["import { ResponseError } from \"@/services/ErrorDecoder\";\nimport { QueryMaker, type IResponse } from \"@/services/QueryMaker\";\nimport type { INotification } from \"./interfaces/INotification\";\n\ninterface INotificationDeletePayload {\n  id: string;\n  documentId: string;\n}\n\ninterface INotificationGetAllResponse extends IResponse {\n  notifications: INotification[];\n}\n\ninterface INotificationPayload {\n  date: Date;\n  documentId: string;\n}\n\nexport class NotificationService {\n  /**\n   * Delete notification object\n   * @param params\n   */\n  public static async deleteOne(\n    params: INotificationDeletePayload\n  ): Promise<void> {\n    const res = await new QueryMaker({\n      route: `/documents/${params.documentId}/notifications/delete/${params.id}`,\n    }).delete();\n    const { error, message } = res.data;\n\n    if (error) {\n      throw new ResponseError(message);\n    }\n  }\n\n  /**\n   * Delete notification object\n   * @returns\n   */\n  public static async getAll(documentId: string): Promise<INotification[]> {\n    const res = await new QueryMaker({\n      route: `/documents/${documentId}/notifications`,\n    }).get<INotificationGetAllResponse>();\n    const { error, message, notifications } = res.data;\n\n    if (error) {\n      throw new ResponseError(message);\n    }\n\n    return notifications || [];\n  }\n\n  /**\n   * Create notification object\n   * @param notification\n   */\n  public static async createOne(\n    notification: INotificationPayload\n  ): Promise<void> {\n    const payload = JSON.stringify({ date: notification.date });\n\n    const res = await new QueryMaker({\n      route: `/documents/${notification.documentId}/notifications/create`,\n      payload,\n    }).post<INotificationGetAllResponse>();\n    const { error, message } = res.data;\n\n    if (error) {\n      throw new ResponseError(message);\n    }\n  }\n}\n"],"names":["NotificationService","params","res","QueryMaker","error","message","ResponseError","documentId","notifications","notification","payload"],"mappings":"+CAkBA,MAAAA,CAAA,CAKA,aAAA,UACAC,EACA,CACA,MAAAC,EAAA,MAAA,IAAAC,EAAA,CACA,MAAA,cAAAF,EAAA,mCAAAA,EAAA,IAAA,CACA,EAAA,OAAA,EACA,CAAA,MAAAG,EAAA,QAAAC,GAAAH,EAAA,KAEA,GAAAE,EACA,MAAA,IAAAE,EAAAD,CAAA,CAEA,CAMA,aAAA,OAAAE,EAAA,CACA,MAAAL,EAAA,MAAA,IAAAC,EAAA,CACA,MAAA,cAAAI,iBAAA,CACA,EAAA,IAAA,EACA,CAAA,MAAAH,EAAA,QAAAC,EAAA,cAAAG,CAAA,EAAAN,EAAA,KAEA,GAAAE,EACA,MAAA,IAAAE,EAAAD,CAAA,EAGA,OAAAG,GAAA,CAAA,CACA,CAMA,aAAA,UACAC,EACA,CACA,MAAAC,EAAA,KAAA,UAAA,CAAA,KAAAD,EAAA,KAAA,EAEAP,EAAA,MAAA,IAAAC,EAAA,CACA,MAAA,cAAAM,EAAA,kCACA,QAAAC,CAAA,CACA,EAAA,KAAA,EACA,CAAA,MAAAN,EAAA,QAAAC,GAAAH,EAAA,KAEA,GAAAE,EACA,MAAA,IAAAE,EAAAD,CAAA,CAEA,CACA"}